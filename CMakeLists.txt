cmake_minimum_required(VERSION 3.0)
project(libswiftnav)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${PROJECT_SOURCE_DIR}/cmake/")
include(ClangTools)
include(FindCheck)

set(MAX_CHANNELS "63" CACHE STRING "Maximum number of concurrent GNSS channels to support.")
configure_file(src/max_channels.h.in max_channels.h)

include(GNUInstallDirs)
find_package(Python3 COMPONENTS Interpreter)

set(HDRS
    include/swiftnav/almanac.h
    include/swiftnav/array_tools.h
    include/swiftnav/bits.h
    include/swiftnav/ch_meas.h
    include/swiftnav/common.h
    include/swiftnav/constants.h
    include/swiftnav/coord_system.h
    include/swiftnav/correct_iono_tropo.h
    include/swiftnav/edc.h
    include/swiftnav/ephemeris.h
    include/swiftnav/fifo_byte.h
    include/swiftnav/glo_map.h
    include/swiftnav/glonass_phase_biases.h
    include/swiftnav/gnss_time.h
    include/swiftnav/ionosphere.h
    include/swiftnav/linear_algebra.h
    include/swiftnav/logging.h
    include/swiftnav/memcpy_s.h
    include/swiftnav/nav_meas.h
    include/swiftnav/pvt_result.h
    include/swiftnav/sbas_raw_data.h
    include/swiftnav/set.h
    include/swiftnav/shm.h
    include/swiftnav/sid_set.h
    include/swiftnav/signal.h
    include/swiftnav/single_epoch_solver.h
    include/swiftnav/troposphere.h)

set(SRCS
    src/almanac.c
    src/bits.c
    src/coord_system.c
    src/correct_iono_tropo.c
    src/edc.c
    src/ephemeris.c
    src/fifo_byte.c
    src/glo_map.c
    src/glonass_phase_biases.c
    src/gnss_time.c
    src/ionosphere.c
    src/linear_algebra.c
    src/logging_common.c
    src/logging.c
    src/memcpy_s.c
    src/nav_meas.c
    src/set.c
    src/shm.c
    src/sid_set.c
    src/signal.c
    src/single_epoch_solver.c
    src/troposphere.c)

add_library(swiftnav ${HDRS} ${SRCS})
target_include_directories(swiftnav PUBLIC ${PROJECT_SOURCE_DIR}/include)
target_include_directories(swiftnav PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
install(FILES ${HDRS} DESTINATION ${CMAKE_INSTALL_FULL_INCLUDEDIR}/swiftnav)
install(TARGETS swiftnav DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR})

set_property(TARGET swiftnav PROPERTY C_STANDARD 99)

if (MSVC)
else ()
    target_link_libraries(swiftnav m)
    target_compile_options(swiftnav PRIVATE "-Werror")
    target_compile_options(swiftnav PRIVATE "-Wmissing-prototypes")
    target_compile_options(swiftnav PRIVATE "-Wimplicit")
    target_compile_options(swiftnav PRIVATE "-Wshadow")
    target_compile_options(swiftnav PRIVATE "-Wswitch-default")
    target_compile_options(swiftnav PRIVATE "-Wswitch-enum")
    target_compile_options(swiftnav PRIVATE "-Wundef")
    target_compile_options(swiftnav PRIVATE "-Wuninitialized")
    target_compile_options(swiftnav PRIVATE "-Wpointer-arith")
    target_compile_options(swiftnav PRIVATE "-Wstrict-prototypes")
    target_compile_options(swiftnav PRIVATE "-Wcast-align")
    target_compile_options(swiftnav PRIVATE "-Wformat=2")
    target_compile_options(swiftnav PRIVATE "-Wimplicit-function-declaration")
    target_compile_options(swiftnav PRIVATE "-Wredundant-decls")
    target_compile_options(swiftnav PRIVATE "-Wformat-security")
    # require at least gcc 5.0
    if (CMAKE_C_COMPILER_VERSION VERSION_GREATER 5.0)
        target_compile_options(swiftnav PRIVATE "-Wfloat-conversion")
    endif()
endif()

# unit tests
if(NOT CMAKE_CROSSCOMPILING AND NOT PIKSI_MULTI_UNIT_TEST)
    add_subdirectory(tests)
endif(NOT CMAKE_CROSSCOMPILING AND NOT PIKSI_MULTI_UNIT_TEST)

add_custom_target(do-update-leap_seconds
  COMMAND Python3::Interpreter ${PROJECT_SOURCE_DIR}/scripts/leap_seconds_generator.py ${PROJECT_SOURCE_DIR}/include/swiftnav/leap_seconds.h
)
