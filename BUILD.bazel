load("@rules_cc//cc:defs.bzl", "cc_library")
load(":bazel/configure_file.bzl", "configure_file")
load("@hedron_compile_commands//:refresh_compile_commands.bzl", "refresh_compile_commands")

refresh_compile_commands(
    name = "gen_compile_commands",
    visibility = ["//visibility:public"],
)

configure_file(
    name = "max_channels",
    out = "max_channels.h",
    template = "src/max_channels.h.in",
    vars = {"MAX_CHANNELS": "63"},
)

cc_library(
    name = "swiftnav",
    srcs = [
        "src/almanac.c",
        "src/bits.c",
        "src/coord_system.c",
        "src/decode_glo.c",
        "src/edc.c",
        "src/ephemeris.c",
        "src/fifo_byte.c",
        "src/geoid_model.c",
        "src/geoid_model_15_minute.inc",
        "src/geoid_model_1_degree.inc",
        "src/glo_map.c",
        "src/glonass_phase_biases.c",
        "src/gnss_time.c",
        "src/ionosphere.c",
        "src/linear_algebra.c",
        "src/logging.c",
        "src/logging_common.c",
        "src/memcpy_s.c",
        "src/nav_meas.c",
        "src/set.c",
        "src/shm.c",
        "src/sid_set.c",
        "src/signal.c",
        "src/single_epoch_solver.c",
        "src/subsystem_status_report.c",
        "src/troposphere.c",
        ":max_channels",
    ],
    hdrs = [
        "include/swiftnav/almanac.h",
        "include/swiftnav/array_tools.h",
        "include/swiftnav/bits.h",
        "include/swiftnav/bitstream.h",
        "include/swiftnav/bytestream.h",
        "include/swiftnav/ch_meas.h",
        "include/swiftnav/common.h",
        "include/swiftnav/constants.h",
        "include/swiftnav/coord_system.h",
        "include/swiftnav/decode_glo.h",
        "include/swiftnav/edc.h",
        "include/swiftnav/ephemeris.h",
        "include/swiftnav/fifo_byte.h",
        "include/swiftnav/float_equality.h",
        "include/swiftnav/geoid_model.h",
        "include/swiftnav/glo_map.h",
        "include/swiftnav/glonass_phase_biases.h",
        "include/swiftnav/gnss_capabilities.h",
        "include/swiftnav/gnss_time.h",
        "include/swiftnav/ionosphere.h",
        "include/swiftnav/leap_seconds.h",
        "include/swiftnav/linear_algebra.h",
        "include/swiftnav/logging.h",
        "include/swiftnav/macro_overload.h",
        "include/swiftnav/macros.h",
        "include/swiftnav/memcpy_s.h",
        "include/swiftnav/nav_meas.h",
        "include/swiftnav/pvt_result.h",
        "include/swiftnav/sbas_raw_data.h",
        "include/swiftnav/set.h",
        "include/swiftnav/shm.h",
        "include/swiftnav/sid_set.h",
        "include/swiftnav/signal.h",
        "include/swiftnav/single_epoch_solver.h",
        "include/swiftnav/subsystem_status_report.h",
        "include/swiftnav/swift_strnlen.h",
        "include/swiftnav/troposphere.h",
    ],
    includes = ["include"],
    textual_hdrs = [
        "src/signal.c",
        "src/geoid_model.c",
    ],
)

cc_library(
    name = "check-utils",
    srcs = ["tests/common/check_utils.c"],
    hdrs = ["tests/common/check_utils.h"],
    deps = ["//:swiftnav"],
)

cc_test(
    name = "swiftnav-test",
    srcs = [
        "tests/check_almanac.c",
        "tests/check_bits.c",
        "tests/check_coord_system.c",
        "tests/check_decode_glo.c",
        "tests/check_edc.c",
        "tests/check_ephemeris.c",
        "tests/check_geoid_model.cc",
        "tests/check_glo_map.c",
        "tests/check_gnss_time.c",
        "tests/check_gnss_time_cpp.cc",
        "tests/check_ionosphere.c",
        "tests/check_linear_algebra.c",
        "tests/check_log.c",
        "tests/check_main.c",
        "tests/check_nav_meas.c",
        "tests/check_pvt.c",
        "tests/check_set.c",
        "tests/check_shm.c",
        "tests/check_sid_set.c",
        "tests/check_signal.c",
        "tests/check_subsystem_status_report.c",
        "tests/check_suites.h",
        "tests/check_troposphere.c",
    ],
    deps = [
        "//:check-utils",
        "//:swiftnav",
        "@my-check//:check",
    ],
)

filegroup(
    name = "clang_format_config",
    srcs = [".clang-format"],
    visibility = ["//visibility:public"],
)
